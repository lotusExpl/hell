bf based

(* -> get the current cell) -< kinda useless
~ -> get the current x position in the memory
= -> get the current y position in the memory

goto symbols to set x and y to the current value in the cell
` -> set x to current value (back quote)
' -> set y to current value (single quote)

each cell have a "last state" like cd - in shell that we can access with %

() for functions -> associate a value to some code you put in parenthesis 
	then you call it with ':'
	
	ex: ++(-->--): 
		associate the sequence "-->--" to the value 2 then call it on the current cell which contains 2

add the possibility to have arguments in the functions with a maximum of 7 arguments (1-7) called with $
if you call $0 it gives you the value associated to the function 
you can modify the arguments (like extra registers) by doing : ++++$!3 which sets the third arg to 4
non initialized args have 0 as default value
the arguments are stored in an 8 long array + you cant use moving instructions as arg while calling a function
	ex: ++{$1[->++<]}   :define a function which multiplies the first argument  by 2
	called like that:
			++:(++)    call with 2
			++:(@2)    call with the value un the second register
			++:(*)     call with the current cell value
			++:(@3++)  call with the value of the third register + 2
when calling the function it "computes" the expression in the ()
separate arguments with |
	ex: ++:(++|@3|*)



2D memory, switch rows with ^ (row - 1) and _ (row + 1)

some kind of registers associated to 0-7
put register value in cell by calling the associated number
update a register by calling @ and the corresponding register, then put in the given register the current cell value
	ex: call second register: ...+>>2>...
	    put 3 in fourth register: +++@4

implement "macros" associate any non-used character to a function call (a certain value)
	?a++++? : associate the function called with 4 to a, so if you put a it automatically calls the corresponding function
		  used to avoid putting the needed value in the cell


print number instead of printing the ascii value with "

list of chars
+-<>,.[]*~=%():$@{}|^_?"  24 chars without counting the numbers 0-7 for the arguments

addon: screen output in an other 2d memory in which we put values to display ox x,y coordinates
		;{++|+++|3} which puts the grayscale associated to the third register at position 2,3
        and then use ! to update the screen renderera and draw the thing


possible updates:
    having the possibility to give a function its own environnement with a symbol right after the ( in the declaration
